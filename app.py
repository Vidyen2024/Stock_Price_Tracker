# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QfV8B4fflSOXupAlnukP5P9aB50M_77N
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Function to fetch stock data
def fetch_stock_data(ticker, start_date, end_date):
    stock = yf.download(ticker, start=start_date, end=end_date)
    stock['Date'] = stock.index
    return stock

# Function to predict stock prices
def predict_stock_prices(data, days_to_predict=30):
    data['Date_ordinal'] = pd.to_datetime(data['Date']).map(pd.Timestamp.toordinal)
    X = np.array(data['Date_ordinal']).reshape(-1, 1)
    y = data['Close']

    # Train-Test Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict future prices
    future_dates = np.array(
        [data['Date_ordinal'].max() + i for i in range(1, days_to_predict + 1)]
    ).reshape(-1, 1)
    predicted_prices = model.predict(future_dates)

    return future_dates, predicted_prices

# Streamlit interface
st.title("Stock Price Tracker and Predictor ðŸ“ˆ")
st.sidebar.header("Input Parameters")

# User inputs
ticker = st.sidebar.text_input("Stock Ticker (e.g., AAPL, GOOG):", "AAPL")
start_date = st.sidebar.date_input("Start Date", datetime(2020, 1, 1))
end_date = st.sidebar.date_input("End Date", datetime.now())
days_to_predict = st.sidebar.slider("Days to Predict", 1, 60, 30)

if st.sidebar.button("Fetch Data"):
    # Fetch data
    data = fetch_stock_data(ticker, start_date, end_date)
    st.write(f"### Stock Data for {ticker}")
    st.line_chart(data['Close'])

    # Predict future prices
    future_dates, predicted_prices = predict_stock_prices(data, days_to_predict)
    st.write(f"### Predicted Prices for Next {days_to_predict} Days")
    st.line_chart(predicted_prices)

    # Display raw data
    st.write("### Raw Data")
    st.dataframe(data)